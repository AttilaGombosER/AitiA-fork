def mount_nfs(self):
        while True:
            try:
                # Run the mount command
                result = subprocess.run(['sudo', 'mount', '/mnt/nfs_share'],
                                        stdout=subprocess.PIPE,
                                        stderr=subprocess.PIPE,
                                        text=True,
                                        check=True)

                # If mount was successful, break the loop
                if result.returncode == 0:
                    logging.info("Mount successful.")
                    break

            except subprocess.CalledProcessError as e:
                logging.critical(f"An error occurred while mounting: {e}")
                logging.critical(f"Error Output: {e.stderr}")
                exit(1)

            except Exception as e:
                logging.critical(f"An error occurred while mounting: {e}")
                exit(1)

            time.sleep(1)
            logging.info("Retrying...")

def deep_merge(default, update):
        """
        Recursively merge two dictionaries, preferring values from 'update',
        but only for keys that exist in 'default'.

        Parameters:
        default (dict): The default dictionary to merge with 'update'.
        update (dict): The dictionary to merge into 'default'.

        Returns:
        dict: The merged dictionary.
        """
        result = default.copy()
        # Finding common keys
        common_keys = set(default.keys()) & set(update.keys())
        # Iterate through common keys and merge nested dictionaries recursively
        for key in common_keys:
            if all(isinstance(d.get(key), dict) for d in (default, update)):
                result[key] = Config.deep_merge(default[key], update[key])
            else:
                result[key] = update[key]

        return result